{
    "root": true,
    "env": {
        "es2022": true
    },
    "extends": [
        "eslint:recommended",
        "plugin:import/recommended",
        "plugin:import/typescript",
        "airbnb-base"
    ],
    "parser": "@typescript-eslint/parser",
    "plugins": [
        "import",
        "@typescript-eslint"
    ],
    "settings": {
        "import/parsers": {
            "@typescript-eslint/parser": [
                ".ts",
                ".tsx"
            ]
        },
        "import/resolver": {
            "typescript": {
                "alwaysTryTypes": true
            }
        }
    },
    "parserOptions": {
        "project": "tsconfig.json",
        "tsconfigRootDir": ".",
        "ecmaVersion": 2021,
        "sourceType": "module"
    },
    "rules": {
        "import/no-unresolved": "error",
        "import/prefer-default-export": "off",
        "dot-notation":"off",
        "no-restricted-globals":"off",
        "import/extensions": [
            "error",
            "ignorePackages",
            {
                "js": "never",
                "jsx": "never",
                "ts": "never",
                "tsx": "never"
            }
        ],
        "indent": [
            "error",
            4,
            {
                "SwitchCase": 1,
                "VariableDeclarator": 1,
                "outerIIFEBody": 1,
                "FunctionDeclaration": {
                    "parameters": 1,
                    "body": 1
                },
                "FunctionExpression": {
                    "parameters": 1,
                    "body": 1
                },
                "CallExpression": {
                    "arguments": 1
                },
                "ArrayExpression": 1,
                "ObjectExpression": 1,
                "ImportDeclaration": 1,
                "flatTernaryExpressions": false,
                "ignoreComments": false
            }
        ],
        "no-param-reassign": [
            "error",
            {
                "props": false
            }
        ],
        "linebreak-style": [
            "error",
            "unix"
        ],
        "object-curly-spacing": [
            "error",
            "always"
        ],
        "@typescript-eslint/object-curly-spacing": [
            "error", 
            "always"
        ],
        "semi": [
            "error",
            "never"
        ],
        "no-multi-assign": [
            "error",
            {
                "ignoreNonDeclaration": true
            }
        ],
        "lines-between-class-members": [
            "error",
            "always",
            {
                "exceptAfterSingleLine": true
            }
        ],
        "no-bitwise": "off",
        "class-methods-use-this": ["warn", { "exceptMethods": [
            "errorMapper",
            "requestMapper",
            "responseMapper"
        ] }],
        "no-shadow": "off",
        "object-curly-newline": "off",
        "no-await-in-loop": "off",
        "no-continue": "off",
        "max-len": [
            "error",
            {
                "code": 130
            }
        ],
        "guard-for-in": "off",
        "arrow-parens": [
            "error",
            "as-needed"
        ],
        "no-restricted-syntax": [
            "warn",
            {
                "selector": "ForInStatement",
                "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array."
            },
            {
                "selector": "ForOfStatement",
                "message": "iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations."
            },
            {
                "selector": "LabeledStatement",
                "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."
            },
            {
                "selector": "WithStatement",
                "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize."
            }
        ],
        "max-classes-per-file": "off",
        "quote-props": "off",
        "quotes": ["warn", "single"],
        "no-return-await": "off",
        "no-underscore-dangle": "off",
        "no-plusplus": "off"
    },
    "overrides": [
        {
            "files": ["*.ts", "*d.ts"],
            "rules": {
                "no-undef": "off",
                "no-unused-vars": "off"
            }
        }
    ]
}
